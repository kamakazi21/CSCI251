An overloaded operator has different functionalities depending ont the argument given to it
Cannot nest comments
Primitive data types - int, double, char
Signed or Unsigned - positive,negative, neutral
Primitive data types have a one to one relationship with memory
Declaring a Function - Instance of the function
Defining a Function - Content inside the function.
All data structure declarations and function prototypes that you want to access should be in.h file
Pointers are variables that contain addresses
Void functions- means they have no return value
Functions need to be declared before main function
Declaraing a function - Function Header 
Defining a function - Function Header with content inside it.
Function prototypes you want to access in other files must be declared as .h
Defining declarations go in the inplementation file, such as print.cpp
Dont put using NAMESPACE STD in include files

Primitive Types mapped directly into memory
Pointers can point to Addresses, Variables, Null 
To get the address of something we use the address of operator &
cout << &value << end - output the address
int &refernceValue = value - stores adddress
referneceValue is an alias, not an object
function can pass value in two ways: by value and by reference
when calling a function, tailing arguments can be omitted if default values are declared in the funciton parameters
pointers are not aliases, ther are actual objects.
int value
int *ptr
ptr = &value
* is a dereferencing operarator tied to a variable name.
pointer can point nowehere by setting to 0 or NULL;
nullptr is a literal that can be converted to any other poiter type/
compund types are terms defined by other types
[] is referd to as subscripting
const - constant
int psotCode[4] = {0} - to initialise all four locations to 0
character arrays can be initialized using a string literal, and they end with a null character \0
arrays are by default pased by refernce
int A;
int *B = &A;
sizeof(value) - size in bytes the type, variable or pointer occupies.
pointers can be used to refer to functions, call functions, pass fucntoins as arguments ot other functions
however pointer aritmetic cannot be performed
pointer to fucniton (*f)(int, int)
Pointers to functions have types associated with both the return type and the parameter types of function
A common use of a function pointer is to pass it as an argument to another function
vector<int> intArray( size );
void pointer is used to hold the address of any type, but without the type being held being known
If we are access to access the content of the memory a void Pointer addresses, we need to type cast it first
