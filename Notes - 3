Dynamic memory allocation is carried out by using a special type of operator that directly communicate with the Memory Manager
Stack - variable withing the liemtime of the prrgam
Heap Memory - Allocation of this memory is at run-time, and use of this memory 
is persistent so we need to explicitly say when we want to stop using it

intpointer = new int - declare momory in heap
delete intpointer - delete memory in heap
intVar = new int[]
delete [] intvar

for( declaration : expression) - supports a range for statement that 
allows us to step through the elements in a sequence and operate on each in the same way.

decltype similar to auto
decltype(f()) variable = x
Static variables, declared as such in functions, persist beyond scope ({}), 
and arenâ€™t re-initialised with each call to the function

ifstream inData
ofstream outData
inData.open("names.txt")
inData >> firstName >> lastName
inData.close()

fstream, an unbounded file stream allowing both reading and writing
fstream x
x.open(s,mode)

mode: in, out, app, ate, trunc, binary

if (!inData) {"error mode"}
if( inData.eof() ) - end of file
if( inData.fail() ) - invalid data
if( inData.bad() ) - hardware problem
if( inData.good() ) - true if no errors detected

if (inFlie.fail())
{
  inFile.clear()
  inFile.ignore(100, '\n')
}

infile.get() - get character
infile.getline(linebuffer, bufszie) - get line

getline(cin,input) when we dont know input length, but stops at new line
getline(cin,input,'t'); when we find t stop reading

infile.put() - put character

